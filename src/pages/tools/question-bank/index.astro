---
import { getCollection } from "astro:content";
import _ from "lodash";

import BaseLayout from "@layouts/BaseLayout.astro";

// Interfaces
import type { ExplainerProps } from "@components/QuestionBank/Explainer/Explainer.interface";
import type { FilterableQuestionsProps } from "@components/QuestionBank/FilterableQuestions/FilterableQuestions.interface";
import type { QuestionBlockProps } from "@components/QuestionBank/QuestionBlock/QuestionBlock.interface";
import type { TagData } from "@localTypes/TagData";
import type { ReferencesProps } from "@components/Core/References/References.interface";

// Components
import { Explainer } from "@components/QuestionBank/Explainer/Explainer";
import { Header } from "@components/Core/Header/Header";
import { FilterableQuestions } from "@components/QuestionBank/FilterableQuestions/FilterableQuestions";
import { References } from "@components/Core/References/References";

// Helpers
import { createQuestionBlock } from "@helpers/createQuestionBlock";

// Content
import headerData from "@content/tools/question-bank/header.json";
import questionBlocksData from "@content/tools/question-bank/questionBlocks.json";

import ageMarkdown from "@content/tools/question-bank/age.md?raw";
import careGiverMarkdown from "@content/tools/question-bank/care-giver.md?raw";
import ethnicityMarkdown from "@content/tools/question-bank/ethnicity.md?raw";
import frequencyAndPurposeOfTravelMarkdown from "@content/tools/question-bank/frequency-and-purpose-of-travel.md?raw";
import sexGenderMarkdown from "@content/tools/question-bank/sex-gender.md?raw";
import travelAndRegulationsMarkdown from "@content/tools/question-bank/travel-and-regulations.md?raw";
import type { ListItem } from "@/src/types/ListItem";

const currentRoute: string = Astro.url.pathname;

// Trim leading slash from current route so we can use to filter returned collections
const filterUrl: string = currentRoute.replace(/^\//, "");

// Get explainer markdown
const explainerCollection = await getCollection("toolsExplainer", ({ id }) => {
  return id === `${filterUrl}explainer`;
});

// Get the unique tags from the question block data to build filter
const uniqueTags = _.uniqBy(
  questionBlocksData.flatMap((item) => item.tags),
  "id",
);

interface MyMap {
  [key: string]: {
    title: string;
    subItems: ListItem[];
  };
}

const questionBlockItems: ListItem[] = questionBlocksData.reduce(
  (acc, questionBank) => {
    questionBank.tags.forEach((tag: any) => {
      const index = acc.findIndex((el) => el.id === tag.id);
      if (index === -1) {
        acc.push({
          label: tag.title,
          id: tag.id,
          subItems: [{ label: questionBank.title, id: questionBank.id }],
        });
      } else {
        acc[index].subItems?.push({
          label: questionBank.title,
          id: questionBank.id,
        });
      }
    });
    return acc;
  },
  [] as ListItem[],
);

const filterTitle = "Theme";

const filterCheckboxList = {
  listItems: questionBlockItems,
  inverse: false,
};

// Build the questions blocks using `questionBlocksData` and found content
const qbAge = await createQuestionBlock(ageMarkdown);
const qbEthnicity = await createQuestionBlock(ethnicityMarkdown);
const qbTravelFrequency = await createQuestionBlock(
  frequencyAndPurposeOfTravelMarkdown,
);
const qbSexGender = await createQuestionBlock(sexGenderMarkdown);
const qbTravelRegulations = await createQuestionBlock(
  travelAndRegulationsMarkdown,
);
const qbCareGiver = await createQuestionBlock(careGiverMarkdown);

// Update the tags
qbAge.tags = questionBlocksData.find((item) => item.title === "Age")
  ?.tags as TagData[];
qbEthnicity.tags = questionBlocksData.find((item) => item.title === "Ethnicity")
  ?.tags as TagData[];
qbTravelFrequency.tags = questionBlocksData.find(
  (item) =>
    item.title ===
    "Frequency and purpose of travel (business, leisure, family)",
)?.tags as TagData[];
qbSexGender.tags = questionBlocksData.find(
  (item) => item.title === "Sex/Gender",
)?.tags as TagData[];
qbTravelRegulations.tags = questionBlocksData.find(
  (item) => item.title === "Travel and regulations",
)?.tags as TagData[];
qbCareGiver.tags = questionBlocksData.find(
  (item) => item.title === "Care giver",
)?.tags as TagData[];

const qbd: QuestionBlockProps[] = [];

// Build the questionBlocksData
qbd.push(qbAge);
qbd.push(qbEthnicity);
qbd.push(qbTravelFrequency);
qbd.push(qbSexGender);
qbd.push(qbTravelRegulations);
qbd.push(qbCareGiver);

// Build the explainerData
const explainerData: ExplainerProps = {
  htmlContent: explainerCollection[0].rendered?.html ?? "",
};

const filterableQuestionsData: FilterableQuestionsProps = {
  filterTitle: filterTitle,
  filterCheckboxList: filterCheckboxList,
  questionBlocks: qbd as QuestionBlockProps[],
};

// Make references blank
const referencesData: ReferencesProps = {
  references: undefined,
};
---

<BaseLayout title={headerData.title}>
  <main>
    <Header {...headerData} />
    <Explainer {...explainerData} />
    <FilterableQuestions {...filterableQuestionsData} client:visible />
    <References {...referencesData} client:visible />
  </main>
</BaseLayout>
